is_enumerable := func(x) {
  return is_array(x) || is_map(x) || is_immutable_array(x) || is_immutable_map(x)
}

is_array_like := func(x) {
  return is_array(x) || is_immutable_array(x)
}

export {
  // all returns true if the given function fn evaluates to a truthy value on
  // all of the items in the x.
  all: func(x, fn) {
    if !is_enumerable(x) { return false }

    for k, v in x {
      if !fn(k, v) { return false }
    }

    return true
  },
  // any returns true if the given function fn evaluates to a truthy value on
  // any of the items in the x.
  any: func(x, fn) {
    if !is_enumerable(x) { return false }

    for k, v in x {
      if fn(k, v) { return true }
    }

    return false
  },
  // chunk returns an array of elements split into groups the length of size.
  // If the x can't be split evenly, the final chunk will be the
  // remaining elements. It returns an empty array if the given argument is
  // not a sequence type.
  chunk: func(x, size) {
    if !is_array_like(x) { return [] }

    numElements := len(x)
    if !numElements { return [] }

    res := []
    idx := 0
    for idx < numElements {
      res = append(res, x[idx:idx+size])
      idx += size
    }

    return res
  },
  // at returns an element at the given index.
  // It returns undefined if index is out of bounds.
  at: func(x, index) {
    if !is_enumerable(x) { return undefined }

    return x[index]
  },
  each: func(x, fn) {
    if !is_enumerable(x) { return }

    for k, v in x {
      fn(k, v)
    }
  },
  filter: func(x, fn) {
    if !is_array_like(x) { return x }

    dst := []
    for k, v in x {
      if fn(k, v) { dst = append(dst, v) }
    }

    return dst
  },
  find: func(x, fn) {
    if !is_enumerable(x) { return undefined }

    for k, v in x {
      if fn(k, v) { return v }
    }
  },
  find_index: func(x, fn) {
    if !is_enumerable(x) { return undefined }

    for k, v in x {
      if fn(k, v) { return k }
    }
  },
  map: func(x, fn) {
    if !is_enumerable(x) { return [] }

    dst := []
    for k, v in x {
      dst = append(dst, fn(k, v))
    }

    return dst
  },
  shuffle(x) {
    if !is_array_like(x) { [] }

  },
  key: func(k, v) { return k },
  value: func(k, v) { return v },

}
