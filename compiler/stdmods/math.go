package stdmods

import (
	"math"

	"github.com/d5/tengo/objects"
)

// Math is a math module.
var Math = Module{
	Name: "math",
	Globals: map[string]objects.Object{
		"e":             &objects.Float{Value: math.E},
		"pi":            &objects.Float{Value: math.Pi},
		"phi":           &objects.Float{Value: math.Phi},
		"sqrt2":         &objects.Float{Value: math.Sqrt2},
		"sqrtE":         &objects.Float{Value: math.SqrtE},
		"sqrtPi":        &objects.Float{Value: math.SqrtPi},
		"sqrtPhi":       &objects.Float{Value: math.SqrtPhi},
		"ln2":           &objects.Float{Value: math.Ln2},
		"log2E":         &objects.Float{Value: math.Log2E},
		"ln10":          &objects.Float{Value: math.Ln10},
		"log10E":        &objects.Float{Value: math.Log10E},
		"abs":           funcAFRF(math.Abs),
		"acos":          funcAFRF(math.Acos),
		"acosh":         funcAFRF(math.Acosh),
		"asin":          funcAFRF(math.Asin),
		"asinh":         funcAFRF(math.Asinh),
		"atan":          funcAFRF(math.Atan),
		"atan2":         funcAFFRF(math.Atan2),
		"atanh":         funcAFRF(math.Atanh),
		"cbrt":          funcAFRF(math.Cbrt),
		"ceil":          funcAFRF(math.Ceil),
		"copysign":      funcAFFRF(math.Copysign),
		"cos":           funcAFRF(math.Cos),
		"cosh":          funcAFRF(math.Cosh),
		"dim":           funcAFFRF(math.Dim),
		"erf":           funcAFRF(math.Erf),
		"erfc":          funcAFRF(math.Erfc),
		"erfcinv":       funcAFRF(math.Erfcinv),
		"erfinv":        funcAFRF(math.Erfinv),
		"exp":           funcAFRF(math.Exp),
		"exp2":          funcAFRF(math.Exp2),
		"expm1":         funcAFRF(math.Expm1),
		"floor":         funcAFRF(math.Floor),
		"gamma":         funcAFRF(math.Gamma),
		"hypot":         funcAFFRF(math.Hypot),
		"ilogb":         funcAFRI(math.Ilogb),
		"inf":           funcAIRF(math.Inf),
		"is_inf":        funcAFIRB(math.IsInf),
		"is_nan":        funcAFRB(math.IsNaN),
		"j0":            funcAFRF(math.J0),
		"j1":            funcAFRF(math.J1),
		"jn":            funcAIFRF(math.Jn),
		"ldexp":         funcAFIRF(math.Ldexp),
		"log":           funcAFRF(math.Log),
		"log10":         funcAFRF(math.Log10),
		"log1p":         funcAFRF(math.Log1p),
		"log2":          funcAFRF(math.Log2),
		"logb":          funcAFRF(math.Logb),
		"max":           funcAFFRF(math.Max),
		"min":           funcAFFRF(math.Min),
		"mod":           funcAFFRF(math.Mod),
		"nan":           funcARF(math.NaN),
		"nextafter":     funcAFFRF(math.Nextafter),
		"pow":           funcAFFRF(math.Pow),
		"pow10":         funcAIRF(math.Pow10),
		"remainder":     funcAFFRF(math.Remainder),
		"round":         funcAFRF(math.Round),
		"round_to_even": funcAFRF(math.RoundToEven),
		"signbit":       funcAFRB(math.Signbit),
		"sin":           funcAFRF(math.Sin),
		"sinh":          funcAFRF(math.Sinh),
		"sqrt":          funcAFRF(math.Sqrt),
		"tan":           funcAFRF(math.Tan),
		"tanh":          funcAFRF(math.Tanh),
		"runct":         funcAFRF(math.Trunc),
		"y0":            funcAFRF(math.Y0),
		"y1":            funcAFRF(math.Y1),
		"yn":            funcAIFRF(math.Yn),
		// TODO: functions that have multiple returns
		// Should these be tuple assignment? Or Map return?
		//"frexp":  nil,
		//"lgamma": nil,
		//"modf":   nil,
		//"sincos": nil,
	},
}
